#!/bin/bash


(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1


# -------------------------------------------------
# ---- configuration settings for your zet --------
# -------------------------------------------------

ZET_EDITOR=$EDITOR
PUBLIC=$ZETDIR
PRIVATE=$ZETDIR_PRIVATE
OPTION=$PUBLIC


# -----------------------------------------
# ----------- commands for zet ------------
# -----------------------------------------

## returns all zettels from the session directory
x_all() {
    local dir="$(x_dir)"
    ls $dir | grep -v '.md'
}

## creates a new zettel in the session directory & pushes to git repo after wq
x_create() {
    local title="$*"
    local dir readme datetime
    datetime="$(x_isomin)"
    dir="$(x_dir)/$datetime"
    readme="$dir/README.md"
    mkdir -p "$dir"
    printf "%s\n\n%s\n" "# $title" "## Tags" > "$readme"
    "$ZET_EDITOR" "$readme"
    cd "$dir" &>/dev/null
    [[ -s "$dir/README.md" ]] || return 1
    line=$(head -1 "$dir/README.md" | sed 's/^# //')
    test -n "$line"
    echo "Committing: $line"
    # parse the tags of the zet we just made and try to add them to registry
    readarray -t file_tags <<< "$(x_tags $datetime | tr -d '#' | tr ' ' '\n')"
    for j in "${file_tags[@]}"; do
        $(x_register $j)
    done
    sort -o "$(x_dir)/REGISTRY.md"{,}
    $(x_push $line)
}

## sets the session directory to either the public or private zk
x_dir() {
    local dir="$OPTION"
    mkdir -p "$dir" && echo "$dir"
}

## edits a zettel and pushes it to respective gitlab repo
x_edit() {
    readarray -t directories <<< "$(x_all)"
    if [[ " ${directories[*]} " =~ " $1 " ]]; then
        local dir="$(x_dir)/$1"
        readme="$dir/README.md"
        "$ZET_EDITOR" "$readme"
        cd "$dir" &>/dev/null
        [[ -s "$dir/README.md" ]] || return 1
        line="$(head -1 "$dir/README.md" | sed 's/^# //') (Updated: $(date -u))"
        test -n "$line"
        echo "Committing: $line"
        $(x_push $line)
    fi
}

## show all zettels which contain a matching tag
x_show() {
    local tag="#$1"
    local dir="$(x_dir)"
    readarray -t directories <<< "$(x_all)"
    for i in "${directories[@]}"; do
        readarray -t tags <<< "$(tail -1 $dir/$i/README.md | tr ' ' '\n')"
        for j in "${tags[@]}"; do
            if [[ $j == $tag ]]; then
                echo "$i - $(head -1 "$dir/$i/README.md" | sed 's/^# //')" 
            fi
        done
    done
}

## returns the current UTC date time as YYYYMMDDHHMM
x_isomin() { date -u +%Y%m%d%H%M ; }

## echoes the markdown to link a given zettel
x_link() {
    readarray -t directories <<< "$(x_all)"
    if [[ " ${directories[*]} " =~ " $1 " ]]; then
        link="[$1](../$1) - $(head -1 "$(x_dir)/$1/README.md" | sed 's/^# //')" 
        echo "$link"
    fi
}

## post a zettelkasten link to twitter
x_post() {
    readarray -t directories <<< "$(x_all)"
    if [[ " ${directories[*]} " =~ " $1 " ]]; then
        local zettel post hashtags
        zettel="$(x_dir)/$1/README.md"
        post=$(head -1 $zettel | sed 's/^# //')
        hashtags=$(tail -1 $zettel)
        url="https://gitlab.com/michaelarn0ld/zettelkasten-public/-/tree/main/$1"
        tweet "$post" "$hashtags" "$url"
    fi
}

## pulls zettelkasten from respective gitlab repo
x_pull() {
    local dir="$(x_dir)"
    cd "$dir" &>/dev/null
    git pull
}

## pushes zettelkasten changes to respective gitlab repo
x_push() {
    local dir="$(x_dir)"
    cd "$dir" &>/dev/null
    git add -A "$dir" &>/dev/null
    if [[ -n "$*" ]]; then
        git commit -m "$*" &>/dev/null
    else
        git commit -m "Updated Zettelkasten: $(date -u)" &>/dev/null
    fi
    git push
}

## reads the contents of a given zettel
x_read() {
    readarray -t directories <<< "$(x_all)"
    if [[ " ${directories[*]} " =~ " $1 " ]]; then
        cat $(x_dir)/$1/README.md
    fi
}

## adds tag to the registry if it is not already there
x_register() {
    local dir registry
    dir="$(x_dir)"
    registry="$dir/REGISTRY.md"
    readarray -t all_tags <<< "$(x_topics | tr -d '1. #')"
    if [[ ! " ${all_tags[*]} " =~ " $1 " ]]; then
        echo "1. #$1" >> $registry
    fi
}

## returns all tags from a given zettel
x_tags(){
    local dir readme
    dir="$(x_dir)/$1"
    readme="$dir/README.md"
    tail -1 $readme
}

## returns all tags from REGISTRY.md
x_topics() {
    local dir registry
    dir="$(x_dir)"
    registry="$dir/REGISTRY.md"
    sort -o "$registry"{,}
    cat $registry
}


# -----------------------------------------
# ---- handling command line args ---------
# -----------------------------------------

## parse the zet file and store the commands
while IFS= read -r line; do
    [[ $line =~ ^declare\ -f\ x_ ]] || continue
    COMMANDS+=( "${line##declare -f x_}" )
done < <(declare -F)
mapfile -t COMMANDS < \
    <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

## check if there is command given
if [[ -n "$1" ]]; then

    ## shows usage of zet
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo "
        ------------------------------------------------------------------------
        commands:
        ------------------------------------------------------------------------
        all                    :    lists all zettels
        create <<zet>>         :    creates a new zettel
        dir                    :    gets session directory 
        edit <<zet_id>>        :    make changes to a zettel & push it
        isomin                 :    returns the datetime as YYYYMMDDHHMM (UTC)
        link <<zet_id>>        :    echoes the markdown to link to a zettel
        post                   :    tweets zettelkasten title, tags, link
        pull                   :    pulls zettelkasten from gitlab repo
        push <<message>>       :    commits zettelkasten to gitlab repo
        read <<zet_id>>        :    prints the contents of a zettel
        register <<zet_tag>>   :    adds a tag to the registry if it's not there 
        show <<zet_tag>        :    shows all zettels that have a matching tag
        tags <<zet_id>>        :    returns all tags associated with zettel
        topics                 :    returns all tags in the registry

        ------------------------------------------------------------------------
        options:
        ------------------------------------------------------------------------
        -p || --private        :    sets default session directory to "PRIVATE"
        "
        exit 0
    fi

    ## sets the session directory to $PRIVATE else it defaults to $PUBLIC
    if [[ "$1" == "--private" || "$1" == "-p" ]]; then
        OPTION=$PRIVATE
        shift 1
    fi

    ## no valid options were given, check and see if the arg is a valid command
    declare CMD="$1"; shift

    ## command is not valid, reccomend to look at usage
    if [[ ! "${COMMANDS[*]}" =~ "$CMD" ]]; then
        echo "invalid usage: -h or --help for help"
        exit 0
    fi

    for c in "${COMMANDS[@]}"; do
        ## excecute proper x_command()
        if [[ $c == "$CMD" ]]; then
            "x_$CMD" "$@"
            exit $?
        fi
    done
fi

## no command provided, reccomend to look at usage
echo "invalid usage: -h or --help for help"
